
= そうだ、特許取ろう　～VUIの特許申請ストーリー～

//image[tag][]{
//}

//flushright{
著者：show（@<href>{https://twitter.com/surumegohan/,@surumegohan}）
//}


== はじめに


本章ではVUIに関する特許出願に至った経緯と、弁理士とのやりとり、特許に関する助成金等について筆者の実体験について一部脚色しつつ、ストーリー形式で記載している章となっております。

VUIに限らず、特許を申請する場合、多くの人は企業の法務部等が特許庁@<fn>{fn000}との対応を担当することになると思いますが、筆者はフリーランスであるため手続きを自分で行いました。

その際のやりとり、苦労話、注意点、ノウハウ等を共有するためにこの機会に筆を執った次第です。
VUIに関してエンジニア自身が特許申請をした事例はおそらく日本では筆者が初だと思いますので、エンジニアの人でも出願ができるということが伝われば幸いです。

本章では筆者の実話や弁理士とのやりとり等は小説風に記載したかったため、該当箇所は「である調」で記載をしています。


//footnote[fn000][特許庁 初めてだったらここを読む～特許出願のいろは～（@<href>{https://www.jpo.go.jp/system/basic/patent/index.html}）]

===== 本章の対象読者@<br>{}
本章の対象読者は、特許出願を考えている方で次のようなことを知りたい方向けです。もちろん、雑学として知っておきたい方も対象です。

 * 特許出願までの経緯や仕組み
 * 特許出願に対する反響
 * 特許出願に関する金銭的コスト 
 * エンジニアが非エンジニアにVUIを説明した実例を知りたい方

===== 本章の前提知識@<br>{}
本章では必須の知識はありませんが、以下の知見があると望ましいです。

 * クラウドとオンプレミスの違い
 * AWS認定ソリューションアーキテクト-アソシエイトレベルのAWSの知見
 * Alexaでのカスタムスキルの作成経験
 * JSON構造
 * UML（特にシーケンス図、アクティビティ図）

===== 本章での用語定義@<br>{}
本章ではGoogle Assistantのアプリケーション、Alexaのスキル、Clovaのスキル等の音声を利用したアプリケーションを「VUIアプリ」として記載します。

また、AWSとAlexaは事実上別組織ですが、アマゾン ウェブ サービス ジャパン株式会社を@<b>{「Amazon社」}として記載します。
それに伴い、グーグル合同会社およびGoogleの本社も含めて@<b>{「Google社」}と記載し、LINE株式会社を@<b>{「LINE社」}として記載します。

=== 特許出願したシステム

特許出願に至ったシステム「音声レビュー・ログデータ収集・分析システム」は以下の発明となります。

==== アーキテクチャ概要

AWSの様々なサービスを活用して以下のようなアーキテクチャ概要となっています。

実際にはここに記載されていない、システムそのもののログ出力等も実装されています。

//image[SHA_architecture][特許出願したシステムのアーキテクチャ概要][scale=1.5]{
//}

なお、本システムのアーキテクチャや処理の流れ等はAlexa Day 2019@<fn>{fn001}の資料@<fn>{fn009}に記載しておりますので適宜ご参照ください。

//footnote[fn001][Alexa Day 2019（@<href>{https://alexaday2019.aajug.jp/}）]
//footnote[fn002][登壇資料（@<href>{https://speakerdeck.com/surumegohan/awswoqu-shi-sitete-xu-chu-yuan-nizhi-tutavuifalse-yin-sheng-rebiyurogudetashou-ji-fen-xi-sisutemu-falsehua}）]

//footnote[fn009][AWSを駆使して特許出願に至ったVUIの 「音声レビュー・ログデータ収集・分析システム」の話（@<href>{https://speakerdeck.com/surumegohan/patent-application-system-materials}）]


==== VUIアプリのログ収集

機能としてVUIアプリのログ収集があります。

 * Google Assistant、Alexa、ClovaなどVUIアプリのプラットフォームに限らず、VUIアプリの使用状況を本システムに送信することでログの収集の一元管理を行う。
 ** 例えば、じゃんけんをするVUIアプリをGoogle Assistant、Alexa、Clova等にリリースした後に、ユニークユーザー数やセッション数などの利用頻度についてログデータを保管する。

==== 音声による星の数のレビューおよび感想を伝えるフィードバック機能

VUIアプリに対してユーザーが話しかけることで開発者に対してレビューやフィードバックを送ることができます。

 * ユーザーがVUIアプリの使用中、もしくは使用後の任意のタイミングで、開発者から使用されたVUIアプリについてのレビューとフィードバックを音声で促し、ユーザーは話しかけるだけで評価を実施する。
 * 集計されたユーザーからの評価はWebページ等に公開され、開発者のみならず音声レビューおよびフィードバックの結果を開示できる。

==== 分析画面のダッシュボード

収集したログおよびユーザーからのレビューやフィードバックは分析画面のダッシュボードにて収集したデータを比較することができます。

ダッシュボードはAmazon QuickSightを用いており、以下のような画面となります。


//image[SHA_dashboard3-2][1枚目（開発中のAlexaスキル）のダッシュボードの上位部分][scale=2.5]{
//}


//image[SHA_dashboard4-2][1枚目（開発中のAlexaスキル）のダッシュボードの下位部分][scale=2.5]{
//}



ダッシュボードは公開範囲単位で3枚あり、それぞれ以下となっています。

 * 1枚目は開発中のVUIアプリのダッシュボード　※上記の2枚の画像のダッシュボード

 * 2枚目は一般に公開したVUIアプリを開発者名とVUIアプリ名を明記して可視化するダッシュボード
 
 * 3枚目は公開に自信があるVUIアプリを一般向けに公開するダッシュボード
 
 
それぞれのダッシュボードは以下の目的があります。

1枚目はVUIアプリを一般公開していない状態で、開発者とVUIアプリ名を匿名としてグラフで可視化するダッシュボードです。

1枚目と2枚目のダッシュボードはあくまで開発者向けに公開するダッシュボードですが、3枚目のダッシュボードは2枚目のダッシュボードにて他者のVUIアプリと比較し、人気や自信がある場合、そのVUIアプリについて公開するダッシュボードです。

//blankline

上記3つのダッシュボードにより、以下のメリットが生じます。

 * 自作したVUIアプリがどのプラットフォームが受け入れやすいのか比較することができる。
 * 自作したVUIアプリが他者のVUIアプリと比較して人気があるのかどうか確認できる。
 ** これにより具体的な数値がでるため、KPIの参考データにすることが可能になる。
 * 人気が出ているVUIアプリのダッシュボード画面を公開することによって、VUIアプリの開発依頼の受注を補助する。


== プロローグ

2018年、東京都内某所在住の僕（本章の筆者）はGoogle AssistantアプリやAlexaカスタムスキル、Clovaスキルを数件リリースしていた。が、@<b>{とある悩み}を抱えていた。それは、数件のAlexaスキルをリリースしていたがAmazonのスキルストアのレビューがせいぜい2件程度しか付かないことである。



僕「ユーザーが一定数いるのはわかっているのに、ユーザーがどう感じたかが開発者にはわからないなぁ・・」



そんなことを考えつつ、Twitterのタイムラインを追いかけていた。

僕「お、このツイートおもしろい。いいね（ポチ）」

//memo{
//noindent
@<b>{Twitterは流れてきたタイムラインのツイートを読んだら即時いいねボタンを押すことができる。}
//}


僕「・・・ん？ということはスキル（VUIアプリ）も利用した直後にレビューを求めればいいんじゃないか？」

そう、これは後から知ることになるのだが、世の中には【スプラッシュマウンテン効果】というものがある。@<br>{}

一つ事例を挙げると、例えばあなたが街を歩いていたり、仕事をしている姿が写った写真が1枚1000円でその日の夜に1枚1000円で売られていて、名も知らない撮影者からその写真を購入するだろうか。恐らくたいていの人は買わないだろう。

ところが、遊園地ではジェットコースターに載っている際の顔写真を、遊具に乗り終わった直後に1000円程度で販売されている。その時、被写体となった人はジェットコースターでの興奮状態直後に、その時限定の体験として購入する仕組みである。この販売方法はつい数年前の話ではなく、かなり以前から行われているだろう。つまり人間は何かを体験した直後であれば、その際に発生した事象に熱心になる。

しかし、Amazonでの買い物をしたとして、そのレビューをする人はどの程度いるのだろうか。いくら配送が早いAmazonの商品だとしても、購入してから購入者の手元に届くのは数日を要する。そこで購入したものをレビューするためにWebページを開き、星で評価をして、コメント入力をするということはかなりの手間である。


== Alexaスキルに音声でのフィードバック機能を実装

僕「音声で手軽に使えるのがVUIなんだから、レビューのためにわざわざWebページを開くことはないだろうなぁ。というか、スキル使ったらそのままスキルの評価をユーザーが声で伝えればいいのでは？」

この思いつきをさっそく実装したAlexaスキルが@<b>{「IT業界の深い闇」}である。

//image[ITyami][IT業界の深い闇][scale=2.0]{
//}


 このスキルは審査を通過することに難儀したが結果的にリリースすることができた。仕様としてはIT業界のあるある話を伝えたあとにTwitterのように@<b>{「いいね」}もしくは@<b>{「いまいち」}をユーザーに話しかけてもらう仕組みにし、Amazon DynamoDBにて保存しておくものである。



今ではAlexaスキルの公式の動きとして、スキルの後にレビューを音声ですることができるが、当時は音声によるレビューという機能は少なくとも日本国内ではなく、審査もかなりの日数を要したため米国等でも事例がなかったかもしれない。

結果的には上々で、ユーザーの@<b>{「いいね」}・@<b>{「いまいち」}はあっという間に数十件集まった。


//note[Alexaスキルの審査]{

開発したAlexaスキルをAmazon社に審査申請すると、たいていの場合は3営業日以内には返答がメールで返信されます。しかし、稀に5営業日を越えても返答がない場合がありますが、ここでの@<b>{「IT業界の深い闇」}の音声によるレビューなど過去事例がないようなスキルの場合はAmazon社内で協議をしている可能性があります。場合によっては米国等とも調整をして頂いているので焦らずに審査結果を待ちましょう。

また、残念ながら審査に通らず、理由も不鮮明の場合は問い合わせフォームから連絡してみると対応していただける場合があります。

もちろん審査の合否に関わらず、結果の連絡を頂いたらAmazon社の対応に対しての評価を返答するように心がけましょう。

//}




== ビジネス化を思いつく

僕「よし。ユーザーのフィードバックを音声でとるのは大成功だ。レビューのためにWebページを開いてられないよね。そりゃあそうだよね。うんうん。」

実際、毎日どんどんフィードバックが溜まっていく。そうなると今度はユーザーからの明確なフィードバックが欲しくなる。

//blankline

僕「『いいね』もしくは『いまいち』はユーザーからの声でかなり頻繁に評価される。ということはAmazonのWebページのように星いくつ、そしてユーザーからの直接の声もAmazon DynamoDBに格納すればスキルの改善に活かせるぞ。ついでに、流れるJSONもどこかに保存しておいて後からログとしてみることができるようにしよう。けども、ありきたりなスキルでは面白味がない。よし、Alexaのデフォルトボイスではなく、声優を活用しよう。」

そこで、美少女から告白されるスキル@<b>{「ヒロインの告白」}を作っているときに、ふと気が付く。

//image[heroine][ヒロインの告白][scale=2.0]{
//}


僕「よくよく考えてみれば、そもそも日本でのVUI3社で音声のレビューをやってないということは、今回のシステムによるレビューをネット上で公開できるようにすればビジネスになるのでは？」



== 業界が出来たてなら特許いけるのでは？

実際にヒロインの告白では、流れるJSONを適宜分解して保存するような動きで実装していった。

まずはAlexaで流れるJSONの仕様を厳密に調査、適宜ライブラリのソースコードを自分で読みつつ実装した。
また、スキルの利用中にデータ類を取得する際に、ユーザーに遅延が起こらないような実装を特別に行っている。

そうしてヒロインの告白は2018年8月に無事にリリースできた。これはVUILT@<fn>{fn010}の2日前であり、VUILTでデモ動画を流したところ、一部界隈から握手を求められるほどに絶賛された。

//footnote[fn010][VUILTは、日本最大級のIoTエンジニアコミュニティ「IoTLT」のスピンオフ企画です。VUIに関する知見を持ち寄りぜひともシェアしてもらおう！そして、一般消費者により良いソリューションを提供できる開発者やデザイナーを増やそう！というのがVUILTのテーマです。（@<href>{https://iotlt.connpass.com/event/156941/}）]

VUILTは僕自身もマーケティング調査の一部と認識していたので好評で良かったのを今でも覚えている。

さて、そんなスキルが裏でデータを取っているが、ふと気が付く。

僕「ん？もし今回の音声でのレビューのシステムが本当に日本初だとしたら@<b>{特許申請できる}のでは？そもそもVUI業界はできたばかりだから何かすればたいてい特許申請できるのではなかろうか？」


幸い、僕には特許出願を個人で経験したことがある知人がおり、今回の話をしたところ弁理士事務所を紹介してもらうことができた。


//note[弁理士事務所の選定]{

僕の場合はたまたま知人が弁理士とのつながりを持っていたのですごくラッキーでした。
人によっては、そもそも弁理士という職業をしらない方もいらっしゃるかもしれません。
信頼している方が弁理士と知人ならば話が早いですが、そのようなツテがない場合は、後のページにて紹介しますが東京都では公益財団法人東京都中小企業振興公社という機関があります。
お近くの都道府県にて調べてみてください。

//}


//clearpage

== 特許権を取得する手続きの流れがすごい

この日は雨が降っていた。これから人生初の特許出願の流れになるが、どうにも嫌な予感がする。
しかしながら弁理士事務所に訪問するということは貴重な体験になることは明らかであるため期待もあった。

雨が滴る中、知人から紹介のあった弁理士事務所に出向き、初回ということで、本システムが特許出願対象になるかの打ち合わせから実施することとなった。弁理士と顔合わせをした後に、特許出願における流れの説明を受ける。



弁理士「特許権を取得するまでの手続きはこのような流れになります。」

弁理士からプリントを頂きそこに目をやると、そこには手続きの流れがびっしりと書かれていた。

この時、僕の脳内には某賭博漫画の「ざわ・・ざわ・・」が流れていた。

僕「こ・・こんなに手続きがあるんですね・・・」

弁理士「審査拒絶の場合も併記しているので自然とこうなってしまいますね。」

僕「さすがある意味で究極のお役所仕事ですね・・・」


弁理士から申請の流れを聞いていると、特許出願をしたとしても審議拒否された場合はそれに対する意見書を提出するという行為を複数回実施する可能性もあるとのこと。もちろんその度に弁理士費用等が発生する。

//image[PatentApplicationFlow2][特許権を取得するまでの手続き][scale=1.0]{
//}

//clearpage

== 技術書典が弊害になる

弁理士と相談しているうちに想定外の壁に突き当たる。
それはまさかの@<b>{技術書典}だった。

//blankline

提案するシステムの概要について話していると、弁理士がこのように発言したのである。

弁理士「おっしゃっている技術は、ここの方々以外に現在どこにも公表されていないでしょうか？」

//blankline

当時、僕は人生初めての同人誌即売会である技術書典5に向けて、原稿を書いていた。

僕「技術書典という技術の同人誌即売会が予定されていて、そこで本システムの一部を実装したことを記載する予定で、ソースコードも掲載するつもりです。」

技術書典の記載内容は@<b>{ヒロインの告白}および@<b>{IT業界の深い闇}のスキルについて原稿を書いていた。

弁理士「その場合、今回の出願の核となる部分は掲載しない方がいいですね。公になってしまうとそれは公知として扱われ特許の対象外となります。」



そう、特許の条件として特許に用いる技術は出願に至るまでに口外してしまうと、既知の技術という扱いになり特許対象から外れてしまうとのこと。もちろん文章で流布など論外である。

//blankline

弁理士「出願日が確定した後なら、認定を待たずとも公にすることは可能なんです。なので対外アピールについては出願をしてしまってから実施することにしましょう。」

僕「そうなんですね、、、危なかったです。ありがとうございます。」



技術書典5で書きたいことは決まっていた上に、今回の特許に関する箇所については同人誌といえども記載をしてはいけない。
この制限がついたため、技術書典5の「スマートスピーカーを遊びたおす本」@<fn>{fn020}ではAmazon DynamoDB等にデータを保存するところはソースコードの流出を省き、かなり曖昧に書くことになった。

//footnote[fn020][スマートスピーカーを遊びたおす本（@<href>{https://booth.pm/ja/items/1315487}）]


== システムの実装

=== 実装当初はAWSの知識が浅すぎた

特許対象となったシステムは音声レビュー・ログ収集分析システムとして実装を1人で行った。
8～9月の段階ではAWS関連の知識が極めて浅かった。API Gatewayの存在すら知らなかったほどである。

DBAおよびビッグデータ系の業務経験が多少あるために、RDBのデータを元にVUI上でのやりとりのログの分析画面となるツールの調査と仮実装をしていた。

VUIアプリの利用頻度やレビューを開発者や一般公開する場合、どのように見せるかを思案し、世の中のダッシュボード（BIツール）も行った。

ダッシュボード(BIツール)の調査結果では

 * Re:dash@<fn>{fn003}
 * Metabase@<fn>{fn004}
 * Kibana@<fn>{fn005}

等が挙げられた。


そうして、Amazon EC2とAWS Elastic Beanstalkを利用し、Amazon RDS（PostgreSQL）@<fn>{fn025}とダッシュボードの連携を実装しスケール性、ビジネスにするなら価格帯はどうするか、ターゲットは誰かなどを別途考慮した。
ちなみにPostgreSQLを選定した理由は個人的な実務経験と、将来的にAmazon Redshift@<fn>{fn023}に移行する可能性があったためである。なお、Amazon RedShiftはPostgreSQLを元に開発されたデータウェアハウスサービスである。

//blankline

調査を続けていると1つのAWSのサービスの情報がたまたま目に留まった。それはAmazon QuickSight@<fn>{fn024}である。以下、Amazon QuickSightのページから引用。

//quote{
Amazon QuickSight は、クラウド駆動の高速なビジネスインテリジェンスサービスです。組織のすべてのユーザーにインサイトを提供します。

完全マネージド型のサービスである QuickSight では、ML Insights を含むインタラクティブなダッシュボードを簡単に作成して公開できます。ダッシュボードはあらゆるデバイスからアクセス可能で、アプリケーション、ポータル、ウェブサイトに埋め込むことができます。
//}


つまり、AWSで使用しているデータ類はAmazon QuickSightを用いることでBIツールとして成立するのであった。
よってAmazon EC2とAWS Elastic Beanstalkを併用する方法そのものが不要となり、BIツールによるデータの可視化に関する課題は即時解決となった。


//footnote[fn003][Re:dash（@<href>{https://redash.io/}）]
//footnote[fn004][Metabase（@<href>{https://www.metabase.com/}）]
//footnote[fn005][Kibana（@<href>{https://www.elastic.co/jp/products/kibana}）]

//footnote[fn025][Amazon RDS（@<href>{https://aws.amazon.com/jp/rds/}）]
//footnote[fn023][Amazon Redshift（@<href>{https://aws.amazon.com/jp/redshift/}）]
//footnote[fn024][Amazon QuickSight（@<href>{https://aws.amazon.com/jp/quicksight/}）]

=== AWS Loftの利用が開始された

当初、都内のコワーキングスペースということで、3名の打ち合わせや僕のコーディングはYahoo! JAPANのオープンコラボレーションスペース「LODGE」@<fn>{fn006}を利用していたが、あまりにも混雑しておりコミュニケーションが目的の施設であるため周囲が賑やかすぎた。

//blankline

僕
「お？Amazonジャパンのオフィスの目黒駅前移転は知ってたけど、コワーキングスペースが設置されるのか。行ってみよう。」

//blankline

10月になるとAWS Loft Tokyo@<fn>{fn007}が利用可能になった。コワーキングスペースが欲しかったのもあり、さっそく10月2日からAWS Loftに入り浸ることになり、定期券すら購入するようになった。
そしてAWS LoftのAsk an ExpertコーナーでAmazon社のSA（Solutions Architect）の人たちとほぼ毎日議論をしながら10月末にはPoC範囲の実装が完了した。

とにかく市販のAWS関連の本や、AWSの各種ドキュメントを読み漁り、手を動かして、不明点は質問するというサイクルを繰り返す。

当時読んでいた書籍は主に以下の通り。

 * Amazon Web Services企業導入ガイドブック -企業担当者が知っておくべきAWSサービスの全貌から、セキュリティ概要、システム設計、導入プロセス、運用まで-
 * Amazon Web Services パターン別構築・運用ガイド 改訂第2版
 * Amazon Web Services 業務システム設計・移行ガイド
 * Amazon Web Services負荷試験入門―クラウドの性能の引き出し方がわかる
 * AWSによるサーバーレスアーキテクチャ

他にもAmazon QuickSightの研修や、Amazon Kinesis、Amazon Redshiftの勉強会に参加して完全に理解できるまで質疑を繰り返す。

なぜここまで徹底的にやったのか。その理由はITシステムにて特許申請をする場合、机上の空論ではなく新技術で動いていることがベターとされており、アーキテクチャをすべて言語化できないといけないからである。

結果的にPoCの実装完了、および、弁理士に説明できるレベルまで到達したので2018年10月30日が特許出願日として認可された。

この時、今回のシステムを正式採用したAlexaスキルが@<b>{「VUIあるある」}である。

//image[vuiaruaru][VUIあるある][scale=2.0]{
//}


//memo{
//noindent
「ぶいゆうあい」という単語が呼び出し名としてAlexaに伝わりにくい場合は、同様のスキル@<b>{「音声サービスあるある」}でも利用可能である。
音声サービスあるあるのリリース時点では、Amazon社に問い合わせた結果、同じような動作をするスキルを別名で公開することが可能ということだった。

//image[onseiaruaru][音声サービスあるある][scale=2.0]{
//}

//}





//footnote[fn006][LODGE（@<href>{https://lodge.yahoo.co.jp/}）]
//footnote[fn007][AWS Loft Tokyo（@<href>{https://aws.amazon.com/jp/start-ups/loft/tokyo/}）]



=== 本システムを利用したVUIアプリの利用規約に注意を払う

本システムでは流れてくるJSONデータをシステム内に保管するが、そこにはユーザーIDなどのデータが含まれる。そこで以下のような利用規約を定めた。



//note[VUIアプリを一般公開する場合に利用規約を記載する]{



本スキルでは、Amazon社が定める個人情報（氏名、メールアドレス、パスワード、電話番号、誕生日など、ユーザーを特定できる情報）は取得しておりません。
レビューやフィードバックのデータは今後のアプリ制作の品質向上に役立たせていただきます。


本スキルで取得したレビューやフィードバック等のデータは、イベント類での発表や、第三者に提供する可能性があります。また、レビュー(星の数)の集計結果やフリーコメントを、保有するWebサイトにて掲載します。

不適切なデータは適宜対応する可能性があります。


本スキルは、特許出願中の技術を用いており、無許可での模倣が発見された場合、法的対応措置を実施します。
ただ、本スキルの技術的な内容および特許についてご関心ある方は下記の連絡先までご連絡をお願いいたします。

//}

//clearpage

== 弁理士とのやりとりの苦悩

特許を出願するためには弁理士と協力して出願用の用紙を作成しなければならない。しかしながら、担当弁理士がそれなりに年齢を重ねた方で、IT関連の知識がかなり古く苦戦した。

この原稿を書いている2020年を迎えた現在においても、スマートスピーカーについての認知度はITエンジニアの中でもかなり薄いのが現状である。そのような状態で、非エンジニアである弁理士が理解してくれるように説明しないといけない。

//blankline

僕「まぁ、オンプレをクラウドに移行する仕事はやってきたし、そのようなことだろう。」

//blankline

この時の僕は甘く考えていた。想像を遥かに超える高難易度ミッションが待ち構えていたのである。


=== これはモジュールですか？

弁理士に技術説明をするために、まずはスマホを用いて、VUIの説明から行った。そして音声でのレビューや複数プラットフォームのログを一元管理できる仕組みについて説明したが、弁理士からでた一言目は

弁理士@<b>{「これはモジュールですか？」}

であった。

//blankline

僕「も・・モジュール・・・合ってるようで合ってない・・」

//blankline

特許に関しては厳密な言語化と弁理士の理解が求められるため、そのためクラウドの仕組みから説明していくことになる。

そこでホワイトボードを用いてのクラウドの説明からしていくが、これがまた難しい。
インターネットの仕組みから説明することになったが、おそらく最も説明に苦労したケースである。インターネットは雲の絵を描くことが多いが、そこから理解してくれない。これはある意味当然のことで、弁理士はたしかに技術面をある程度知らなければならないが、そもそも技術者気質の人が弁理士になることは稀だろう。そのため弁理士の年齢を鑑み、電話交換手や糸電話から話すこととした。


=== インターネットの説明

厳密に言うと異なるが、まず糸電話のような例として、社内の内線電話を例にして説明した。
一部脚色せざるを得なかったので正確ではないがとにかく概要を理解してもらうことから始まる。

//blankline

僕
「部署Aと部署B同士が繋がっていて、お互いに連絡しあうことができます。ただ、内線電話なので社外には電話がかけられません。糸電話みたいなものです。」



僕
「電話交換手という職業がありましたよね。例えば東京から北海道に電話したいとなると、一旦NTTの回線を管理するところに繋がって、交換手が取り次いで交換機に繋ぎます。インターネットはそのような交換手が機械的にたくさんいて、ルーターを経由して、ドメインが・・・」

弁理士
「ドメイン？」

僕
「あー・・っとDNSの説明がいるんですね。」

ホワイドボードに随時説明をしていく。僕は大学のネットワーク系研究室で修士号まで進学したことをこの時はありがたく感じた。今にして思うと明らかに情報系の大学の講義であった気がする。


=== オンプレとクラウドの違いの説明

だいたい理解してくれたとのことで、ようやくオンプレとクラウドの違いについて概要を説明する。

//blankline

僕
「オンプレは企業内に物理的にサーバーを管理していて、設定とかすべて自分で行うわけです。今回はAWSというクラウドを使っているのですが、これは開発者もしくは開発企業はAmazon社のサーバーをレンタルして使うんです。なので開発企業がサーバーを持つ必要がありません。」

弁理士
「なんで？」

僕
「なんで！？」

弁理士
「企業がサーバーを自分で持たないとしても、Amazon社でサーバーが動くなら結局そこの設定や運用もあるでしょ。何が違うの？」

僕
「例えばセキュリティのパッチを当てたり最新の状態に管理することが自社でやらずに、クラウドの運営会社に任せることができるので、本来やりたい部分に注力できるんです。」

話していくと、どうもモジュールと関数を同じように認識しているようであったため、APIの説明もしていくことになる。
ここまできて、AWSの知見が活かされていく。

僕
「クラウドの提供会社でプログラムを動かす場合、APIを呼び出すという仕組みになるんですけども」

弁理士
「いまいち、わかんないなぁ」

//blankline

仕方がないので以降もひとしきり説明し、Alexaを中心にどのように動作するのかをホワイドボードで図をいくつも記載し撮影してもらう。
それを元に弁理士側がどの程度理解することができたのかを文章でもらうことになった。

また、全体的な流れがどうしても認識しにくいとのことで、シーケンス図、アクティビティ図、クラス図をその場で描き説明することとなった。

なお、UMLは別途 draw.io@<fn>{fn008} @<fn>{fn0082} を用いてデータとして提出した。


//image[drawio][draw.ioにてシーケンス図を描く例][scale=2.5]{
//}


//footnote[fn008][draw.ioはブラウザベースで、無料でオフラインにてUMLを使った図を容易に作成できるツールです。（@<href>{https://about.draw.io/}）]
//footnote[fn0082][draw.ioを導入した際に作成したブログ記事。（@<href>{https://surumegohan.hatenablog.com/entry/20180904/1536059284}）]



=== 文章にしてみることで見えてくる様々な問題

後日、弁理士から特許出願用の仮の文章が届いた。
A4用紙25枚程度にひたすら文字がびっしり書かれている。

//blankline

僕
「まるで学術論文みたいだな・・・」

//blankline

特許出願の文章を初めて目にした僕の率直な感想である。
どうやらある程度のフォーマットがあるようで以下のようなことが記載されていた。

 * 整理番号
 * 特許庁長官の氏名
 * 特許分類
 * 発明者
 * 特許出願人
 * 代理人（弁理士の情報）
 * 明細、請求事項、要約、図面
 * 発明名称
 * 技術分野
 * 背景技術
 * 先行技術文献
 * 発明により解決を試みる課題
 * 課題解決のための手段
 * 発明の効果
 * 特許請求範囲
 * 請求項 

 他にも記載があるが、大学の論文にある程度酷似しており、世の中にこういう課題があって、こうやって解決する方法を考えた、似たような事例はいくつかあるが、今回の発明は初である、という流れである。

//blankline

僕
「80ブロック・・・」

その文章は今回のシステムの流れを80ブロック程度に分割し、文章できっちり説明されていた。
UMLを用いて様々な角度から解説をしたため、幸いなことに概ねの認識は合っていた。
しかしながら丁寧に読んでいくと致命的欠陥に気づく。それらを以下のように対応していった。

//centering{
@<b>{以降はVUIに関する特許出願時の注意点となるため}@<br>{}
@<b>{弁理士との会話調ではなく1つずつ解説していきます。}
//}


==== 先行技術の調査

特許は誰よりも早く発明したということが重要となります。
そのため、既に先行技術が特許に登録されているかどうかの調査が必要になります。

今回は弁理士に簡易的なチェックを行って頂き、幸いなことに完全に重複している事例は存在しませんでした。

しかしながら、以下のような事例が存在したため、差異を言語化・文章化する必要がありました。

 * 複数のアプリケーションを1画面に表示し、レビューの数値を元にランキングの生成
 * 電子書籍に対するレビューの付与

ちなみに、弁理士ではなくても簡易的な調査は可能です@<fn>{fn00}@<fn>{fn01}@<fn>{fn02}。

//footnote[fn00][J-PlatPat（@<href>{https://www.j-platpat.inpit.go.jp/}）]
//footnote[fn01][知財ポータルサイト IP Force（@<href>{https://ipforce.jp/}）]
//footnote[fn02][WIPO が提供する特許データベース検索サービス PATENTSCOPE （@<href>{https://patentscope2.wipo.int/search/ja/search.jsf}）]



==== 言語化が難しい

例えば、スマートスピーカーに話しかけてカスタムスキルの返答が返ってくるとします。
これを特許の文章にするための言語化がかなり難しいです。



まず、カスタムスキルについては本来のAlexaに備わっていない機能に新しく開発者が機能を追加・拡張するものとして定義するため「拡張機能」と呼称します。
また、記載しなくても通常分かるであろうということは通じないため、サーバーについても言語化していきます。

各種サーバーの構成として

 * ハードディスク等の記憶処理部分
 * メモリ
 * 音声処理
 * ユーザー管理
 * 制御
 * 拡張機能連携部（カスタムスキルを呼び出す箇所）

等を今回のシステムに用いる環境での言葉の定義として図と共にすべて記載していくことになります。

また、サーバーのハードディスクが外付けで物理的に拡張していくことも想定し、「記憶部は内臓とは限らず、外付けの記憶装置として独立させてもよい。」等も記載します。

これらを言語化し、それを文章にすると例えば以下のようになります。

//memo{
//noindent
プラットフォームサーバーは、データの入出力を行う入出力部、ユーザ情報や拡張機能の評価結果などの様々な情報や音声サービスの様々な拡張機能の他、自身の動作を制御するプログラムなどを記憶する記憶部、様々な情報や拡張機能などを表示する表示部、様々な拡張機能をユーザデバイスに連係する拡張機能連係部、音声サービスを行うための音声データを処理する音声処理部、ユーザの登録情報などを維持管理するユーザ管理部、及びこれらの構成要素を制御する制御部を含む。
//}


上記のような文章を1ブロックとして、弁理士が記載した文面を合計で約80ブロック程度確認、修正しました。@<fn>{fn0030}

//footnote[fn0030][ここにその文章を記載できないことが大変悔しい]


==== 音声がテキスト化されるのはどこなのか

クラウドの説明がだいたい終わった後に、スマートスピーカーのようなVUIデバイスの話にようやく入ることになりました。
しかしここで問題が発生しました。@<b>{VUI機器にユーザーが話しかけたとして、それはどこで音声をテキストに変換しているのか}、また、@<b>{逆にテキストから音声に変換しているところはどこなのか}。
さらに3プラットフォームそれぞれの仕様が異なる可能性があった上に、別のプラットフォームが日本上陸したらどうなるかという未来の課題が浮かび上がりました。

デバイス内でテキストに変換してJSON化して各プラットフォームに送信されているかもしれませんし、今後の将来を見据えて音声データごと（どうにかして）サーバー側に伝わり、サーバー側でテキストに変換する可能性もある。
Google社、Amazon社、LINE社の内部事情は正確には不明であることは仕方がありません。


//note[特許出願に関してここで重要なこと]{


特許申請をする際に、提出した文章の中に技術的仕様に穴があった場合、それは別の技術の扱いになってしまいます。そのため、テキストと音声データがどこで変換されても本特許に該当するように広い範囲で記載しなければいけません。
コンピューターは0か1かでデータをやりとりするため、アナログの音声はどこかでデジタル化されますが、2018年の技術と将来は異なる可能性がゼロではないのです。

ちなみに、出願時はリリースされていなかったClovaDeskはユーザーが話しかけた際に話しかけた内容をその場でテキスト化されて表示されます。

//}

==== 未来永劫JSON形式とは限らない

弁理士にAlexaの動作を説明した際にJSON形式でメッセージを送受信する旨を伝えていましたが、今後の将来で永久的にJSON形式であり続ける保障はありません。
そのため@<b>{「現状ではJSON形式であるが必ずしもテキスト化したデータはJSON形式とは限らない」}という説明が必要になりました。


==== スキルには様々なパターンがある

この本の読者なら認識している方も多いと推察されますが、実はAlexaに限ってもスキルのパターンがいくつかあります。それは何かというと、プラットフォーマーがプリイントールしてそうなスキルと開発者が作成・申請するスキルです。
例えばAlexaに「音楽をかけて」と伝えた場合、それはAmazon社で実装された動作を実行するものであるため、プラットフォーマーが作成した音声のやりとりも今回の請求対象に含めなければなりません。
つまり、第三者である開発者以外も今回の特許に含める記載が必要になりました。

==== 音声以外の操作も含む必要がある

VUIのため、通常は音声でやりとりを行うが、画面付きデバイスの操作を鑑み、VUIアプリに対する操作はコンソールやタッチパネルについても記載しました。

==== 音声でのレビューとフィードバックの仕様

今回の特許技術の請求対象に音声での星の数とレビューや感想をユーザーに求める機能があります。
モデルとなったヒロインの告白では、ユーザーが一通りスキルを利用したあとにレビューと感想をスキルから求められるが、このシステムの利用者が開発するVUIアプリによっては、レビューだけ、もしくは感想だけを実施したい場合、もしくは複数回実施したい場合も考えられました。

そのため、シーケンス図およびアクティビティ図を修正し、開発者の任意のタイミングで音声でのレビューおよび感想を伝えることができるように修正を行いました。

==== ログ収集の仕様

複数プラットフォームを跨って、VUIアプリの利用状況のログデータを収集することが本システムの肝であるため、APIの動作およびWebページ等の可視化の仕様はかなり厳密に記載しました。

ここにきて、AWSの仕様についても最低限触れていきましたが、AWS用語は記載してはならず、AWSにて処理をしている動作の説明を言語化して記載していきました。
将来的にAWSを利用しなくなる可能性があるためです。

==== 言葉の曖昧さ

例えば、Alexaにおいてユーザーが星の数もしくは感想を述べる旨を了承する「はい」の場合、YesIntentが所謂「はい」という扱いになりますが、特許の出願書に「はい」と記載してしまうと「Yes」の場合は技術対象外になるため、「はい」「Yes」のような【了承をする場合】として記載しました。


== 気になるお値段

当然ですが、特許の出願および認定後の維持には費用がかかります。

端数を省いてざっくり記載します。


//table[envvars0][特許関連にかかる費用の一部]{
項目名	費用	備考
-----------------
特許出願時の弁理士事務所手数料および印刷代	約40万円	-
審査請求時の弁理士事務所手数料および印刷代	約15万円	-
早期審査請求	約10万円	急がなければ不要
意見書手数料	約3万円～6万円	拒絶された場合に必要
補正書手数料	約3万円～6万円	拒絶された場合に必要
特許査定	約2万円	-
成功報酬	約14万円	-
//}



なお、意見書や補正書は拒絶された内容によって値段が変動します。


== 注意点

今回記載した特許出願に至ったシステムは予告なく変更・終了することがあります。

== 助成金などの制度

東京都では公益財団法人東京都中小企業振興公社という知的財産についてサポートをしてくれる機関があります。

ここに来訪すると知的財産を活用したビジネス戦略やセミナーなどについて無料で対応してくれます。
また、日本国外に特許を出願する場合、海外へ事業展開する際に必要となる知財権取得のための出願費用の一部が助成対象になる場合があるので、知的財産に関わった場合は来訪しても良いでしょう。

ただし、フリーランスのような個人は基本的には助成金対象にならないため、法人登記しておく必要が生じます。


== おまけ

本システムをAWS Loftで作成し特許出願したことにより、以下のAmazon社公式イベントで登壇することができました。

 * AWS Startup Day 2019 Tokyo
 * AWS Summit Tokyo 2019

また、本システム実装のためにAWSの各種サービスを検証した結果、以下の資格も比較的容易に取得できました。

 * AWS 認定クラウドプラクティショナー
 * AWS 認定ソリューションアーキテクト – アソシエイト

この資格取得によりAmazon社からインタビューを受け、AWS Summitや何かしらの冊子に@<b>{Alexa Day 2019のTシャツを着た僕}が写っております。@<fn>{fn0033}


//footnote[fn0033][本章執筆者のブログ（@<href>{https://surumegohan.hatenablog.com/entry/20190616/1560694435}）]


== まとめ

ふとした思い付きから特許出願に至りました。
弁理士とはインターネットの説明から始まりましたが、改めて非ITエンジニアにクラウドやVUIを説明する難しさを体験できました。
頭ではわかっているつもりでも、人に言語化した上で文章で説明できないと理解とまではいかないと実感しました。

この経験によりVUIの知識が浅い方々との多少の打ち合わせは実務でも乗り越えられそうです。

//blankline

また、AWS LoftをはじめAmazon社の様々な方の支えがあって僕自身もエンジニアとして成長することができました。
2017年のAWS Summitになんとなく参加していた自分が、2018年にAWS公式イベントでの登壇やインタビューなどの貴重な体験を得るとは思いませんでした。
数々の機会を与えていただき、Amazon社の方々には感謝しかありません。

//clearpage

== Special Thanks

 * この本を手にしてくださった皆様
 * 本章を閲覧なさってくださった皆様
 * 特許出願に関して弁理士紹介およびノウハウを共有してくれた方（本名は伏せます）
 * アマゾン ウェブ サービス ジャパン株式会社の方々
 * AWS Loftにて対応してくれたソリューションアーキテクトの方々
 * 本章記載の特許出願システムのβテストを行っていただいた方々

== おわりに

本章では本書が合同誌ですので、あえてエンジニアリング面以外の経験を中心に執筆させていただきました。
VUIでエンジニアが特許出願をしたという話は他に聞いたことがないので、少しでも雰囲気が伝われば幸いです。

ふとした思いつきを、わからないながらに調査したり、協力を仰いだりしながら手を動かしてITサービスを創ることはエンジニアリングの最も魅力的な面ではないでしょうか。


とはいえ、他の章の著者も述べておりますが、VUIを始めることは他の技術分野よりも比較的容易です。
ツールも充実しているので非エンジニアでも気軽にVUIアプリケーションを作成することができます。


特許出願は明らかに異質ではありますが、始まりは本当に思い付きです。僕はその思い付きをやってみようと行動しただけです。

//blankline

本書、本章を読んで頂いた方が、VUI系の勉強会に参加したり、もちろん自分で手を動かしたりして@<b>{「やってみようかな」}とVUIの世界に一歩前進して頂ければ幸いです。

